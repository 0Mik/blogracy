/*
 * Copyright (c)  2011  Enrico Franchi and University of Parma.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package it.unipr.aotlab.blogracy.view;


import it.unipr.aotlab.blogracy.errors.BlogracyError;
import it.unipr.aotlab.blogracy.util.FileUtils;
import it.unipr.aotlab.blogracy.util.HTMLUtil;
import org.eclipse.swt.SWT;
import org.eclipse.swt.browser.Browser;
import org.eclipse.swt.browser.LocationAdapter;
import org.eclipse.swt.browser.LocationEvent;
import org.eclipse.swt.widgets.Composite;
import sun.reflect.generics.reflectiveObjects.NotImplementedException;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.net.URL;
import java.util.Locale;

public class ViewImpl implements View {
    private Browser browser;
    private static final String MAIN_PAGE = "view.html";

    ViewImpl(Composite parent) {
        buildUI(parent);
    }

    /**
     * Creates the full UI inside parente
     *
     * @param parent composite where the UI is placed.
     */
    private void buildUI(Composite parent) {
        buildBrowser(parent);
    }

    /**
     * Builds the browser widget, connecting all the relevant events/javascript.
     *
     * @param parent composite where the browser should be placed.
     */
    private void buildBrowser(Composite parent) {
        browser = new Browser(parent, SWT.NULL);
        browser.setJavascriptEnabled(true);
        browser.setUrl(getLocalFileName(MAIN_PAGE));

        browser.addLocationListener(new LocationAdapter() {
            @Override
            public void changing(final LocationEvent event) {
                String location = event.location;
                System.out.println("Going to... " + location);
            }

        });
    }

    /**
     * Changes the language of the UI.
     *
     * @alert currently not implemented.
     */
    public void changeLanguage() {
        Locale lang = Locale.getDefault();
        throw new NotImplementedException();
    }

    /**
     * Returns a string representing the main application page.
     *
     * @return a string representing the main application page or
     *         a string representing an error if an exception occurred.
     */
    protected String getPage() {
        try {
            return getLocalFileContent(MAIN_PAGE);
        } catch (BlogracyError e) {
            return HTMLUtil.errorString(e);

        }

    }

    /**
     * Get the contents of the specified filename.
     *
     * @param fileName is the name of the file relative to the classfile generated by this source.
     * @return the contents of the file
     * @throws BlogracyError if there are problems reading the file
     */
    protected String getLocalFileContent(String fileName) throws BlogracyError {
        InputStream is = getLocalFileStream(fileName);
        StringWriter stringWriter = new StringWriter(512);
        try {
            FileUtils.copyCompletely(new InputStreamReader(is), stringWriter);
            return stringWriter.toString();
        } catch (IOException e) {
            throw new BlogracyError(e);
        }
    }

    /**
     * Get an input stream for the specified filename
     *
     * @param fileName is the name of the file relative to the classfile generated by this source.
     * @return the {@link InputStream} relative to the specified file.
     * @throws BlogracyError if the file cannot be found.
     */
    private InputStream getLocalFileStream(final String fileName) throws BlogracyError {
        Class<ViewImpl> cl = ViewImpl.class;
        InputStream inputStream = cl.getResourceAsStream(fileName);
        if (inputStream == null) {
            throw new BlogracyError("Could not find " + fileName + " file");
        } else {
            return inputStream;
        }
    }

    private String getLocalFileName(final String fileName) {
        Class<ViewImpl> cl = ViewImpl.class;
        URL url = cl.getResource(fileName);
        return url.getPath();
    }


}
